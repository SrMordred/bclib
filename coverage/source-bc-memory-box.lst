       |module bc.memory.box;
       |
       |import bc.memory : default_allocator;
       |import bc.error : panic;
       |
       |struct Box(Type, alias TAllocator = default_allocator)
       |{
       |        import std.traits : isArray, Select, Unqual;
       |        import std.range : ElementType;
       |
       |        alias IsArray   = isArray!Type;
       |        alias DataType  = Select!( IsArray , Type, Type* );
       |        alias Allocator = TAllocator;
       |
       |        private DataType __ptr;
       |
       |        /*
       |                Constructors, Destructors, Assign, and Free Boxes
       |        */
     21|        this(Type value)
       |        {
       |                import std.algorithm : moveEmplace, moveEmplaceAll;
       |                import bc.memory : alloc, moveTo;
       |
       |                import std.traits : ReturnType;
       |
       |                static if( IsArray )
       |                {
     11|                        __ptr = alloc!(Type, Allocator)( value.length );
     11|                        value.copyTo( __ptr );
       |                }
       |                else
       |                {
     10|                        __ptr = alloc!(Type, Allocator);
     10|                        value.moveTo( *__ptr );                 
       |                }
       |        }
       |
      2|        this(ref Box other)
       |        {
       |                import bc.memory : alloc, copyTo;
       |
      2|                if( other )
       |                {
       |                        static if( IsArray )
       |                        {
       |                                import bc.io;
      1|                                print(other);
      1|                                __ptr = alloc!( Type, Allocator )( other.capacity );
       |                                //other.__ptr.copyTo( __ptr );
       |                        }
       |                        else
       |                        {
      1|                                __ptr = alloc!( Type, Allocator )();
      1|                                other.__ptr.copyTo( __ptr );
       |                        }       
       |                }
       |        }
       |
       |        void opAssign( Self : Box )( auto ref Self other )
       |        {
       |                import bc.memory : alloc, copyTo;
       |
      2|                free();
       |
      2|                if( other )
       |                {
       |                        static if( IsArray )
       |                        {
      1|                                __ptr = alloc!( Type, Allocator )( other.capacity );
      1|                                other.__ptr.copyTo( __ptr );
       |                        }
       |                        else
       |                        {
      1|                                __ptr = alloc!( Type, Allocator )();
      1|                                other.__ptr.copyTo( __ptr );
       |                        }       
       |                }
       |        }
       |
       |        void fromPtr( ref DataType ptr )
       |        {
      2|                __ptr = ptr;
      2|                ptr = null;
       |        }
       |
       |        ~this()
       |        {
     28|                free();
       |        }
       |
       |        void free()
       |        {
       |                import bc.memory : dealloc, destructor;
     35|                if ( this )
       |                {
       |                        static if(IsArray)
     14|                                destructor(__ptr);
       |                        else
     12|                                destructor(*__ptr);
       |
     26|                        dealloc!(Allocator)(__ptr);
       |                }
       |        }
       |
       |        static if( IsArray )
       |        {
       |                import bc.memory : allocInit,dealloc, copyTo;
       |                void reserve( size_t size )
       |                {
      1|                        if( size > __ptr.length )
       |                        {
       |                        //      //TODO: every calloc call can be replaced with alloc call if the type donÂ´t have indirections
       |
      1|                                auto tmp = allocInit!(Type, Allocator)( size );
      1|                                __ptr.copyTo( tmp );
      1|                                free();
      1|                                __ptr = tmp;
       |                        }
       |                }
       |
       |                void reserveInit( size_t size )
       |                {
0000000|                        if( size > __ptr.length )
       |                        {
0000000|                                auto tmp = allocInit!(Type, Allocator)( size );
0000000|                                __ptr.copyTo( tmp );
0000000|                                free();
0000000|                                __ptr = tmp;
       |                        }
       |                }
       |                
     13|                size_t opDollar(){ return __ptr.length; }
       |                alias capacity = opDollar;
       |
       |                @safe
       |                ref  opIndex( size_t index ) { 
       |                        import bc.error : panic;
       |
      8|                        if( index >= capacity ) panic("Box[index] is out of bounds!");
      8|                        if( !this ) panic("Box[index] indexing an empty box!");
      8|                        return __ptr[ index ]; 
       |                }
       |
       |                @safe
       |                auto opSlice() { 
       |                        import bc.error : panic;
       |
      1|                        if( !this ) panic("Box[] slicing an empty box!");
      1|                        return __ptr[0 .. $];
       |                }
       |
       |                @safe
       |                auto opSlice(size_t start, size_t end) {
      1|                        if( !this ) panic("Box[start .. end] slicing an empty box!");
      2|                        if( start >= capacity || end > capacity) panic("Box[",start," .. ",end,"] is out of bounds!");
       |
      1|                        return __ptr[start .. end]; 
       |                }
       |
       |        }
       |
       |        @safe
       |        ref opUnary( string op: "*")(string file = __FILE__, int line = __LINE__)
       |        {
       |                import bc.error : panic;
       |                static if( IsArray ){
      4|                        if( this ) return __ptr;
0000000|                        panic( "Dereferencing an empty box in ",file, ": ", line);
       |                } 
       |                else{
     14|                        if( this ) return *__ptr;
0000000|                        panic( "Dereferencing an empty box in ",file, ": ", line);
       |                }
0000000|                assert(0);
       |        }
       |
       |        /*
       |                Internal data access functions
       |        */
       |        @safe
       |        bool opCast()
       |        {
     76|                return __ptr !is null;
       |        }
       |
       |
       |        @system
       |        auto ptr()
       |        {
      6|                static if(IsArray) return __ptr.ptr;
      5|                else return __ptr;
       |        }
       |        /*
       |                Change box ownership
       |        */
       |
       |        @trusted
       |        auto move()
       |        {
       |                import std.algorithm : move_ = move;
      2|                return move_(this);
       |        }
       |
       |        @system
       |        auto releasePtr()
       |        {
      2|                auto tmp = __ptr;
      2|                __ptr = null;
      2|                return tmp;
       |        }
       |
       |        @trusted
       |        auto match( alias SomeFunction, alias NoneFunction )()
       |        {
       |                import bc.traits : ReturnType;
       |
      4|                if( this ) 
       |                {
       |                        static if( IsArray )
      1|                                return SomeFunction( __ptr );
       |                        else
      1|                                return SomeFunction( *__ptr );
       |                }
       |                else
       |                {
      2|                        return NoneFunction();
       |                }
       |        }
       |
       |}
       |
       |struct box(alias Allocator = default_allocator)
       |{
       |        static opCall( Type )(auto ref Type value)
       |        {
       |                import std.functional : forward;
     19|                return Box!(Type, Allocator)(forward!value);    
       |        }
       |
       |        static fromPtr( Type )(ref Type* value)
       |        {
      1|                Box!(Type, Allocator) box;
      1|                box.fromPtr( value );
      1|                return box;
       |        }
       |
       |        static fromPtr( Type )(ref Type[] value)
       |        {
      1|                Box!(Type[], Allocator) box;
      1|                box.fromPtr( value );
      1|                return box;
       |        }
       |}
       |
       |unittest{
       |
       |        import bc.io;
       |        import core.stdc.stdio;
       |        import core.stdc.stdlib;
       |
       |        import bc.memory : CounterAllocator;
       |        import bc.io : print;
       |
       |        static CounterAllocator!() counter_allocator;
       |
       |        alias _Box(T) = Box!(T, counter_allocator);
       |
       |                
      2|        { _Box!int box_int = _Box!int(123); }
      2|        { _Box!int _box_int = box!counter_allocator(123); }
      2|        { auto _box_int = box!counter_allocator(123); } 
       |
       |        import std.array : staticArray;
       |
      1|        auto array_ptr   = [1,2,3].staticArray;
      1|        auto array_slice = array_ptr[];
       |
      2|        { _Box!(int[]) _box_int = _Box!(int[])( array_slice ); }
      2|        { _Box!(int[]) _box_int = box!counter_allocator( array_slice ); }
      2|        { auto _box_int = box!counter_allocator( array_slice ); } 
       |
       |        {
      2|                auto a = box!counter_allocator(123);
      2|                auto b = a;
      1|                *a = 100;
       |
      1|                assert(cast(bool)a, "b = a, is a copy, not move.");
      1|                assert(cast(bool)b, "b = a, is a copy, not move.");
       |
      1|                assert( *a != *b, "a and b _boxes are have different values" );
      1|                assert( a.ptr != b.ptr, "a and b have different pointers" );
       |        }
       |
       |        {
      2|                auto a = box!counter_allocator(100);
      2|                auto b = box!counter_allocator(200);
       |
      1|                a = b;
       |
      1|                assert(cast(bool)a, "a and b have values");
      1|                assert(cast(bool)b, "a and b have values");
       |
      1|                assert( *a == *b, "a and b have the same value" );
      1|                assert( a.ptr != b.ptr, "a and b have different pointers" );
       |        }
       |        {
      1|                auto ptr = cast(int*) counter_allocator.malloc(4);
      1|                *ptr = 100;
      2|                auto a = box!counter_allocator.fromPtr( ptr );
       |
      1|                assert(ptr is null, "box.fromPtr must move the pointer to gain ownership");
      1|                assert(*a == 100, "box value must be from the pointer");
       |        }
       |        {
      2|                auto x = box!counter_allocator(100);
      1|                x.free();
      1|                assert(x.ptr is null, "free() testing");
       |        }
       |        {
      2|                auto a = box!counter_allocator(100);
      2|                auto b = a.move();
       |
      1|                assert( cast(bool)a == false, "a was moved" );
      1|                assert( cast(bool)b , "b have the value" );
      1|                assert( *b == 100 , "b have the value" );
       |        }
       |        {
      2|                auto a = box!counter_allocator(100);
      1|                auto ptr = a.releasePtr();
      1|                assert( cast(bool)a == false, "a must be empty" );
      1|                assert( *ptr == 100);
       |
      1|                typeof(a).Allocator.free(ptr);
       |        }
       |        {
      2|                auto x = box!counter_allocator(123);
       |
      1|                auto right_value = x.match!(
      1|                        v => v,
0000000|                        () => 0,
       |                );
      1|                assert(right_value == 123, "box.match some value" );
       |
      1|                x.free();
       |
      1|                right_value = x.match!(
0000000|                        v => v,
      1|                        () => 0,
       |                );
      1|                assert(right_value == 0, "box.match none value" );
       |
       |        }
       |
       |        //slices
       |
      1|        auto buffer1 = [1,2,3].staticArray;
      1|        auto arr1 = buffer1[];
       |
      1|        auto buffer2 = [1,2,3,4].staticArray;
      1|        auto arr2 = buffer2[];
       |
       |        {
      2|                auto a = box!counter_allocator(arr1);
      2|                auto b = a;
      1|                a[0] = 100;
       |
      1|                assert(cast(bool)a, "b = a, is a copy, not move.");
      1|                assert(cast(bool)b, "b = a, is a copy, not move.");
       |
      1|                assert( a[0] != b[0], "a and b _boxes are have different values" );
      1|                assert( a.ptr != b.ptr, "a and b have different pointers" );
       |        }
       |
       |        {
      2|                auto a = box!counter_allocator(arr1);
      2|                auto b = box!counter_allocator(arr2);
       |
      1|                a = b;
       |
      1|                assert(cast(bool)a, "a and b have values");
      1|                assert(cast(bool)b, "a and b have values");
       |
      1|                assert( *a == *b, "a and b have the same value" );
      1|                assert( a.ptr != b.ptr, "a and b have different pointers" );
       |        }
       |        {
      1|                auto ptr = (cast(int*) counter_allocator.malloc(int.sizeof * 3))[0 .. 3];
      1|                ptr[0] = 100;
      1|                ptr[1] = 200;
      1|                ptr[2] = 300;
      2|                auto a = box!counter_allocator.fromPtr( ptr );
       |
      1|                assert(ptr is null, "box.fromPtr must move the pointer to gain ownership");
      1|                assert(a[0] == 100, "box value must be from the pointer");
      1|                assert(a[1] == 200, "box value must be from the pointer");
      1|                assert(a[2] == 300, "box value must be from the pointer");
       |        }
       |        {
      2|                auto x = box!counter_allocator(arr1);
      1|                x.free();
      1|                assert(x.ptr is null, "free() testing");
       |        }
       |        {
      2|                auto a = box!counter_allocator(arr1);
      2|                auto b = a.move();
       |
      1|                assert( cast(bool)a == false, "a was moved" );
      1|                assert( cast(bool)b , "b have the value" );
      1|                assert( b[0] == 1 , "b have the value" );
       |        }
       |        {
      2|                auto a = box!counter_allocator(arr1);
      1|                auto ptr = a.releasePtr();
      1|                assert( cast(bool)a == false, "a must be empty" );
      1|                assert( ptr[0] == 1);
       |
      1|                typeof(a).Allocator.free(ptr.ptr);
       |        }
       |        {
      2|                auto x = box!counter_allocator(arr1);
       |
      1|                auto right_value = x.match!(
      1|                        v => v,
       |                        (){
0000000|                                int[] tmp;
0000000|                                return tmp;
       |                        },
       |                );
      1|                assert(right_value == arr1, "box.match some value" );
       |
      1|                x.free();
       |
      1|                right_value = x.match!(
0000000|                        v => v,
       |                        (){
      1|                                int[] tmp;
      1|                                return tmp;
       |                        },
       |                );
      1|                assert(right_value.length == 0, "box.match none value" );
       |
       |        }
       |
       |        {
      2|                auto a = Box!(int[])();
      1|                a.reserve(10);
      1|                assert( a.capacity == 10, "box.reserve check value" );
      1|                assert( a.ptr !is null , "reserved box must have a valid pointer" );
       |        }
       |
       |        {
      2|                auto a = box!counter_allocator(arr1);
      1|                auto slice = a[];
      1|                slice[1] = 123;
      1|                assert( a[1] == 123, "Slice is a pointer to the real value" );
       |
      1|                slice = a[0 ..2];
      1|                assert( slice.length == 2 , "Slice length check" );
       |        }
       |
      1|    print("Allocation Counter: ", counter_allocator.counter);
      1|        assert( counter_allocator.counter == 0 , "Allocations must be 0 at the end" );
       |
       |
       |}
source\bc\memory\box.d is 92% covered

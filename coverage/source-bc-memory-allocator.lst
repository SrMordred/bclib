       |/++
       |        This module provides a basic allocator that implements `malloc, calloc and free.`
       |
       |        Also set a global variable called `default_alloc` that is used as the default allocator for 
       |        all the lib.    
       |
       |        A basic allocator must have this signature:
       |        ---
       |        struct IAllocator
       |        {
       |                void* malloc(size_t);
       |                void* calloc(size_t);
       |                void free(void*);
       |        }
       |        ---
       |+/
       |module bc.memory.allocator;
       |
       |///
       |unittest{
       |        struct LogAllocator
       |        {
       |        import core.stdc.stdlib : 
       |                _malloc = malloc,
       |                _calloc = calloc,
       |                _free = free;
       |                import core.stdc.stdio : printf;
       |
       |                void* malloc(size_t size ){
      2|                        printf("Malloc : (%d)\n", size);
      2|                        return _malloc( size );
       |                }
       |                void* calloc(size_t size){
0000000|                        printf("Calloc : (%d)\n", size);
0000000|                        return _calloc( 1, size );
       |                }
       |                void free(void* ptr){
      2|                        _free(ptr);
      2|                        printf("Free : (%p)\n", ptr);
       |                }
       |        }
       |
      2|        auto log_allocator = LogAllocator();
      2|        auto buffer        = log_allocator.malloc(100);
      2|        log_allocator.free(buffer);
       |}
       |
       |static alloc_counter = 0;
       |
       |/**
       |        Basic Default Allocator
       |*/
       |struct DefaultAllocator
       |{
       |    import core.stdc.stdlib : _malloc = malloc, _calloc = calloc, _free = free;
       |
       |    import core.stdc.stdio : printf;
       |    /**
       |        Allocate memory
       |        Params: size = Size in bytes of memory to be allocated
       |        Returns: Pointer to new allocated memory
       |        */
       |    void* malloc(size_t size)
       |    {
     58|        auto ptr = _malloc(size);
     58|        printf("#(%d) Alloc(%d)  -> %p\n", alloc_counter, size, ptr);
     58|        alloc_counter++;
     58|        return ptr;
       |    }
       |
       |    /**
       |        Allocate zeroed memory
       |        Params: size = Size in bytes of memory to be allocated
       |        Returns: Pointer to new allocated memory
       |        */
       |    void* calloc(size_t size)
       |    {
      2|        auto ptr = _calloc(1, size);
      2|        printf("#(%d) Calloc(%d) -> %p\n", alloc_counter, size, ptr);
      2|        alloc_counter++;
      2|        return ptr;
       |    }
       |    
       |    
       |    /**
       |        Free memory
       |        Params: ptr = Pointer to the memory address to be freed
       |        */
       |    void free(void* ptr)
       |    {
     60|        --alloc_counter;
     60|        printf("#(%d) Free()     -> %p\n", alloc_counter, ptr);
     60|        _free(ptr);
       |    }
       |}
       |
       |///global variable that are used by default on implementations that require an allocator.
       |public DefaultAllocator default_alloc;
       |
       |
       |unittest{
       |
      2|        DefaultAllocator allocator;
      2|        auto ptr = allocator.malloc(100);
      2|        byte* bytes = cast(byte*)allocator.calloc(100);
      2|        bool iszero = true;
    606|        foreach(v ; bytes[0 .. 100])
    200|                if(v != 0) iszero = false;
       |
      2|        assert( iszero );
      2|        assert( ptr !is null );
       |
      2|        allocator.free(ptr);
      2|        allocator.free(bytes);
       |}
source\bc\memory\allocator.d is 93% covered

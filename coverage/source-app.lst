       |
       |import bc.io : print;
       |
       |//enum DefaultCopyCtor = `
       |//this(ref typeof(this) other)
       |//{
       |//      foreach (i, ref field; other.tupleof)
       |//              this.tupleof[i] = field;
       |//};`;
       |
       |@trusted struct Dummy
       |{
       |        int x;
       |        int* xx;
0000000|        this(int x)
       |        {
0000000|                this.x = x;
0000000|                print("CTOR(", x, ")");
       |        }
       |
0000000|        this(ref Dummy other)
       |        {
0000000|                if (x)
       |                {
0000000|                        print("DTOR(", x, ")");
       |                }
       |
0000000|                if (other.x)
       |                {
0000000|                        x = other.x;
0000000|                        print("COPY_CTOR(", x, ")");
       |                }
       |        }
       |
       |        ~this()
       |        {
0000000|                if (x)
       |                {
0000000|                        print("DTOR(", x, ")");
       |                }
       |        }
       |}
       |
       |import bc.container : Dict;
       |
       |
       |//TODO: ADT pointers 
       |//TODO: Result and Maybe types
       |//Some()
       |//None()
       |//Ok()
       |//Err()
       |
       |//@safe
       |
       |
       |mixin template Interface()
       |{
       |
       |        import bc.traits : 
       |                getAllMembers, 
       |                getMember_, 
       |                isFunction,
       |                getFunctionReturnType,
       |                getFunctionParamsType;
       |
       |        import std.meta : AliasSeq;
       |
       |        alias Self = typeof(this);
       |
       |        void* ptr;
       |
       |        void opAssign( T )(auto ref T other)
       |        {
       |                ptr = cast(void*)&other;
       |        }
       |
       |        //pragma(msg, getAllMembers!Self );
       |        mixin( 
       |                (){
       |                static foreach( member ; getAllMembers!Self )
       |                {
       |                        static if( member != "Self" )
       |                        {{
       |                                alias Member = getMember_!( Self , member );    
       |                        
       |                        static if( isFunction!( Member ) )
       |                        {{
       |                            alias ReturnType = getFunctionReturnType!( Member );
       |                            alias Params     = getFunctionParamsType!( Member );
       |
       |                            pragma(msg, ReturnType);
       |                            pragma(msg, Params );
       |
       |                        }}
       |                        }}
       |                }
       |                        return "";
       |                }()
       |        );
       |
       |
       |        pragma(msg, typeof(this));
       |}
       |
       |import bc.memory;
       |import bc.container : Array, array;
       |
       |//extern(C)
       |@safe
       |void main()
       |{
       |        import std.range;
       |        import std.array;
       |        import bc.traits;
       |
       |        //auto arr = array(1,2,3,4,5,6,7,8);
       |
      1|        auto arr = array(1,2, [3,4].staticArray , iota( 5 , 7 ), array(7,8) );
       |
       |        //auto arr2 = Array!int();      
       |
       |        //arr2.push(1,2, [3,4].staticArray , iota( 5 , 7 ), array(7,8) );
       |
       |        ////auto ptr = arr[0];
       |
       |        //print(arr);
       |        //print(arr.capacity);
       |        //print(arr2);
       |        
       |
       |
       |
       |
       |}
       |
       |
       |
source\app.d is 8% covered
